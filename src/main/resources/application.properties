SPACE=local
DOMAIN=localdomain
OAUTH_CLIENT_ID=null
OAUTH_SECRET=null

logger.name=beachfront
logger.console=true

concurrent.threads=8
http.max.total=7500
http.max.route=4000
http.keep.alive.duration.seconds=5
cookie.expiry.seconds=900
cookie.name=api_key

# If set to true, then all job requests will spawn a new job - regardless if an identical job results already exists.
# Used only for testig, otherwise this should never be enabled
block.redundant.job.check=false

# IA Broker
ia.broker.protocol=https
ia.broker.prefix=bf-ia-broker
ia.broker.port=443
ia.broker.server=${ia.broker.prefix}.${DOMAIN}
ia.broker.activation-poll-interval-sec=10
ia.broker.activation-poll-max-attempts=60

# Geopackage
gpkg.converter.protocol=https
gpkg.converter.prefix=bf-geojson-geopackage-converter
gpkg.converter.port=443
gpkg.converter.server=${gpkg.converter.prefix}.${DOMAIN}

# Piazza parameters
piazza.protocol=https
piazza.port=443
piazza.server=${piazza.protocol}://piazza.${DOMAIN}:${piazza.port}
PIAZZA_API_KEY=null
piazza.poll.frequency.seconds=30
job.timeout.hours=2
api.key.timeout.minutes=15

# OAauth Configuration
oauth.auth-base-url=https://${OAUTH_AUTH_DOMAIN:localhost:5002}
oauth.api-base-url=https://${OAUTH_API_DOMAIN:localhost:5002}
oauth.logout-base-url=https://${OAUTH_LOGOUT_DOMAIN:localhost:5002}
oauth.authorize-url=${oauth.auth-base-url}/ms_oauth/oauth2/endpoints/oauthservice/authorize
oauth.logout-url=${oauth.logout-base-url}/oam/server/logout
oauth.token-url=${oauth.api-base-url}/ms_oauth/oauth2/endpoints/oauthservice/tokens
oauth.profile-url=${oauth.api-base-url}/ms_oauth/resources/userprofile/me

# Default Database Configuration
vcap.services.pz-postgres.credentials.jdbc_uri=jdbc:postgresql://localhost:5432/piazza
# User used for all database read/write interactions
vcap.services.pz-postgres.credentials.username=piazza
vcap.services.pz-postgres.credentials.password=piazza
# Used for liquibase management only
vcap.services.pz-postgres-service-key.credentials.username=piazza
vcap.services.pz-postgres-service-key.credentials.password=piazza

# Spring Data Source for PostgreSQL
spring.datasource.url=${vcap.services.pz-postgres.credentials.jdbc_uri}
spring.datasource.username=${vcap.services.pz-postgres.credentials.username}
spring.datasource.password=${vcap.services.pz-postgres.credentials.password}
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect

# Liquibase Configuration
liquibase.url=${vcap.services.pz-postgres.credentials.jdbc_uri}
liquibase.user=${vcap.services.pz-postgres-service-key.credentials.username}
liquibase.password=${vcap.services.pz-postgres-service-key.credentials.password}
liquibase.enabled=true
liquibase.change-log=classpath:migrations/changelog.xml

# GeoServer Layer and Store Configuration
geoserver.workspace.name=piazza
geoserver.datastore.name=piazza
geoserver.layer.name=bfdetections
geoserver.style.name=bfdetections

# GeoServer Default Basic Authentication Credentials
vcap.services.pz-geoserver.credentials.boundless_geoserver_password=piazza
vcap.services.pz-geoserver.credentials.boundless_geoserver_username=piazza

# Default GeoServer URL
vcap.services.pz-geoserver.credentials.boundless_geoserver_url=https://localhost:443/geoserver/index.html

# Local development parameters. TODO: Remove
#server.port=8443
#server.ssl.key-store=localhost.p12
#server.ssl.key-store-password=MyKeyStorePass
#server.ssl.keyStoreType=PKCS12
#server.ssl.keyAlias=localhost
