SPACE=local
DOMAIN=localdomain
OAUTH_CLIENT_ID=null
OAUTH_SECRET=null

SKIP_SSL_VALIDATION: "true"
SPRING_PROFILES_ACTIVE: cloud,pki-geoserver-auth

# The location of the deployed resource server sample application
# RESOURCE_URL: https://russell-sample.dev.dev.east.paas.geointservices.io

# Grant type to be set for the application's UAA client configurations. Only one grant type per application is supported by the SSO service.
GRANT_TYPE: authorization_code

# Identity provider(s) to be set for the application's client configurations
SSO_IDENTITY_PROVIDERS: uaa

# The following are bootstrap configurations you may use to automatically create client configurations in the SSO service for your application if the configurations do not exist. These configurations take effect when binding or rebinding to the SSO, and will overwrite existing client configurations if any. The values provided below are examples.

# Whitelist of redirect URI(s) allowed for the application. This value must start with http:// or https://
# SSO_REDIRECT_URIS: https://my-domain-here.domain.org

# Client scope(s) for the application, not used for client credentials grant type
SSO_SCOPES: openid, todo.read, todo.write

# Client scope(s) for the application that are automatically authorized when acting on behalf of a user
# SSO_AUTO_APPROVED_SCOPES: openid, todo.read

# Client authorities for the application, only used for client credentials grant type 
# SSO_AUTHORITIES: openid, uaa.resource, todo.read, todo.write

# List of groups a user must have in order to authenticate successfully for the application
# SSO_REQUIRED_USER_GROUPS: my_group_here

# Lifetime in seconds of the application's access token
# SSO_ACCESS_TOKEN_LIFETIME: 300

# Lifetime in seconds of the application's refresh token
# SSO_REFRESH_TOKEN_LIFETIME: 1800

# Resource(s) that the application will use as scopes/authorities to be created if they do not already exist during bootstrapping
SSO_RESOURCES: |
  todo.read:  Read Objects
  todo.write: Write Objects

# Application icon with the application name and launch URL that will be displayed on the Pivotal Account dashboard if configured to show
# SSO_ICON: <base64 encoded image - do not exceed 64kb>
# SSO_LAUNCH_URL: <url>
# SSO_SHOW_ON_HOME_PAGE: <true/false>


logger.name=beachfront
logger.console=true

debug.tracebacks.user-exception=${DEBUG_TRACEBACKS:false}
debug.tracebacks.runtime-exception=${DEBUG_TRACEBACKS:false}

concurrent.threads=8
http.max.total=7500
http.max.route=4000
http.keep.alive.duration.seconds=5
cookie.expiry.seconds=-1
cookie.name=api_key

# If set to true, then all job requests will spawn a new job - regardless if an identical job results already exists.
# Used only for testig, otherwise this should never be enabled
block.redundant.job.check=false
block.redundant.job.check.extras.name=block_redundant_job_check

# IA Broker
ia.broker.protocol=https
ia.broker.prefix=bf-ia-broker
ia.broker.port=443
ia.broker.server=${ia.broker.prefix}.${DOMAIN}
ia.broker.activation-poll-interval-sec=10
ia.broker.activation-poll-max-attempts=120

# Piazza parameters
piazza.protocol=https
piazza.port=443
piazza.server=${piazza.protocol}://piazza.${DOMAIN}:${piazza.port}
PIAZZA_API_KEY=null
piazza.poll.frequency.seconds=30
job.activation.timeout.minutes=20
job.timeout.hours=2
api.key.timeout.minutes=15

# Client origins allowed
auth.allowedOrigins=https://beachfront.${DOMAIN},https://bf-swagger.${DOMAIN},https://localhost:8080
auth.publicEndpoints=/,/favicon.ico,/oauth/start,/oauth/callback

# Default Database Configuration
vcap.services.pz-postgres.credentials.jdbc_uri=jdbc:postgresql://localhost:5432/piazza
# User used for all database read/write interactions
vcap.services.pz-postgres.credentials.username=piazza
vcap.services.pz-postgres.credentials.password=piazza
# Used for liquibase management only
vcap.services.pz-postgres-service-key.credentials.username=piazza
vcap.services.pz-postgres-service-key.credentials.password=piazza

# Spring Data Source for PostgreSQL
spring.datasource.url=${vcap.services.pz-postgres.credentials.jdbc_uri}
spring.datasource.username=${vcap.services.pz-postgres.credentials.username}
spring.datasource.password=${vcap.services.pz-postgres.credentials.password}
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.use-new-id-generator-mappings=true
spring.jpa.properties.hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisDialect

# Liquibase Configuration
liquibase.url=${vcap.services.pz-postgres.credentials.jdbc_uri}
liquibase.user=${vcap.services.pz-postgres-service-key.credentials.username}
liquibase.password=${vcap.services.pz-postgres-service-key.credentials.password}
liquibase.enabled=true
liquibase.change-log=classpath:migrations/changelog.xml

# GeoServer Layer and Store Configuration
geoserver.workspace.name=piazza
geoserver.datastore.name=piazza
geoserver.layer.name=__beachfront__geoserver
geoserver.layergroup.name=bfdetections
geoserver.style.name=bfdetections_jobid_filter
geoserver.timeout=10000
exit.on.geoserver.provision.failure=false

# GeoServer Default Basic Authentication Credentials
vcap.services.pz-geoserver.credentials.boundless_geoserver_password=piazza
vcap.services.pz-geoserver.credentials.boundless_geoserver_username=piazza

# Default GeoServer URL
vcap.services.pz-geoserver.credentials.boundless_geoserver_url=https://localhost:443/geoserver/index.html
