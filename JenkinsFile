#!/usr/bin/groovy

node('python35') {
    def mvn = tool 'M3'
    def root = pwd()
    def zapHome = tool 'ZAProxy_v2_5_0'
    def nodejs = tool 'NodeJS_6'
    def sonar = tool 'SonarQube Scanner 3.0'
    def projectId = "venicegeo:beachfront:bf-api"
    
    stage('Setup') {
        deleteDir()
        if(env.GITLAB_CREDS) {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
        } else {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        }
    }
    
    def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
    appvers = appvers.trim()
    def appName = "bf-api-${appvers}"
    
    stage("Dependency Check") {
        withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
            sh "/jslave/dependency-check/dependency-check/bin/dependency-check.sh --version"
            sh '/jslave/dependency-check/dependency-check/bin/dependency-check.sh --project "bf-api" --scan "vendor" --format "XML" --enableExperimental --disableBundleAudit'
            sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
    }
    
    stage("Fortify") {
        withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
            sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER} ./{*.py,**/*.py}"
            sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${env.BUILD_NUMBER}  -scan -Xmx1G -f fortifyResults-${env.BUILD_NUMBER}.fpr"
            sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${env.BUILD_NUMBER}.fpr ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
    }
    
    stage("Sonar") {
        withCredentials([string(credentialsId: "${env.SONAR_TOKEN}", variable: 'USERNAME')]) {
            withEnv(["HOME=${root}"]) {
                sh "${sonar}/bin/sonar-scanner -Dsonar.sources=${root}/bfapi -Dsonar.host.url=${env.SONAR_URL} -Dsonar.projectKey=${projectId} -Dsonar.projectName=${projectId} -Dsonar.login=${USERNAME} -Dsonar.projectVersion=1.0"
            }
        }
    }
    
    stage("Archive") {
        def archiveName = "bf-api.tar.gz"
        sh "tar -cvzf ${archiveName} bfapi vendor sql Procfile requirements.txt runtime.txt dependency-check-report.xml"
        // Check if exists already
        def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get \
        -Dmaven.repo.local="${root}/.m2/repository" \
        -DrepositoryId=nexus \
        -DartifactId=bf-api \
        -Dversion=${appvers} \
        -DgroupId="org.venice.beachfront" \
        -Dpackaging=tar.gz \
        -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
        >> /dev/null 2>&1 \
        """, returnStatus: true)
        if (getDependencyStatus == 0) {
            echo "Artifact version ${appvers} exists in Nexus, nothing to do"
        } else {
            // Deploy file
            sh """mvn -X --quiet --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} \
            -DrepositoryId=nexus \
            -Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" \
            -DgroupId="org.venice.beachfront" \
            -DgeneratePom=false \
            -Dpackaging=tar.gz \
            -Dmaven.repo.local="${root}/.m2/repository" \
            -DartifactId=bf-api \
            -Dversion=${appvers} \
            """
        }
        sh """
          rm ${archiveName} Vagrantfile fortify* dependency-check-report.xml sonar-project.properties
          rm -rf vagrant
        """
        
    }
    stage("Phase One Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        def piazza_api_key = ""
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${params.BEACHFRONT_PIAZZA_AUTH}", usernameVariable: 'TOKEN', passwordVariable: 'unused']]) {
            def keyCurl = sh(script: """curl -s https://piazza.${env.PHASE_ONE_PCF_SPACE}.${env.PIAZZA_URL}/v2/key -u \"${TOKEN}:\"""", returnStdout: true)
            piazza_api_key = sh(script: """echo \"${keyCurl}\"|grep -oE '\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'""", returnStdout: true).trim()
            sh """
              if [ -z $piazza_api_key ]; then
                echo "No Piazza API key found"
                exit 1
              fi
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"],
              [$class: 'StringBinding', credentialsId: "${env.GEOAXIS_CLIENT_ID}", variable: "GEOAXIS_CLIENT_ID"],
              [$class: 'StringBinding', credentialsId: "${env.GEOAXIS_SECRET}", variable: "GEOAXIS_SECRET"]
            ]) {
                  sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.PYTHON_BUILDPACK_NAME} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}
                  cf set-env ${appName} PIAZZA_API_KEY $piazza_api_key
                  cf set-env ${appName} GEOAXIS ${env.GEOAXIS_DOMAIN}
                  cf set-env ${appName} GEOAXIS_CLIENT_ID ${GEOAXIS_CLIENT_ID}
                  cf set-env ${appName} GEOAXIS_SECRET ${GEOAXIS_SECRET}
                  cf restage ${appName}
                """
                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
            }
        }
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              mkdir -p ${root}/zap-out
              ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN}
              cat ${root}/zap-out/zap.xml
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"bf-api \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-api"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
        
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase One Integration Tests") {
                        if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${nodejs}/bin",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                        sh "sh ci/beachfront_integration_tests.sh"
                    }
                }
            }
        }
    }
    stage("Phase Two Deploy") {
        if(!fileExists('.cf')) {
            sh "mkdir -p .cf"
        }
        def piazza_api_key = ""
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.BEACHFRONT_PIAZZA_AUTH}", usernameVariable: 'TOKEN', passwordVariable: 'unused']]) {
            def keyCurl = sh(script: """curl -s https://piazza.${env.PHASE_TWO_PCF_SPACE}.${env.PIAZZA_URL}/v2/key -u \"${TOKEN}:\"""", returnStdout: true)
            piazza_api_key = sh(script: """echo \"${keyCurl}\"|grep -oE '\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}'""", returnStdout: true).trim()
            sh """
              if [ -z $piazza_api_key ]; then
                echo "No Piazza API key found"
                exit 1
              fi
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"],
              [$class: 'StringBinding', credentialsId: "${env.GEOAXIS_CLIENT_ID}", variable: "GEOAXIS_CLIENT_ID"],
              [$class: 'StringBinding', credentialsId: "${env.GEOAXIS_SECRET}", variable: "GEOAXIS_SECRET"]
            ]) {
                  sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                  cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.PYTHON_BUILDPACK_NAME} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start
                  cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}
                  cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}
                  cf set-env ${appName} PIAZZA_API_KEY $piazza_api_key
                  cf set-env ${appName} GEOAXIS ${env.GEOAXIS_DOMAIN}
                  cf set-env ${appName} GEOAXIS_CLIENT_ID ${GEOAXIS_CLIENT_ID}
                  cf set-env ${appName} GEOAXIS_SECRET ${GEOAXIS_SECRET}
                  cf restage ${appName}
                """
                try {
                  sh "cf start ${appName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${appName} -f"
                  error("Error during application start. Deleting ${appName} and failing the build.")
                }
            }
        }
        withCredentials([
          [$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
        ]) {
            sh """
              mkdir -p ${root}/zap-out
              ${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN}
              cat ${root}/zap-out/zap.xml
              /bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
            """
        }
        withEnv([
          "CF_HOME=.cf"
        ]) {
            withCredentials([
              [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
            ]) {
                sh """
                  cf api ${env.PCF_API_ENDPOINT}
                  cf auth ${CFUSER} ${CFPASS}
                  cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}
                """
                def legacyAppNames = sh(script: """cf routes | grep \"bf-api \" | awk '{print \$4}'""", returnStdout: true)
                sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-api"
                // Remove legacy applications
                for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                    def legacyAppName = legacyApp.toString().trim()
                    if(legacyAppName != appName) {
                        sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname ${legacyAppName}"
                        sh "cf delete -f ${legacyAppName}"
                    }
                }
            }
        }
    }
    if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase Two Integration Tests") {
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                  "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        sh "sh ci/beachfront_integration_tests_stage.sh"
                    }
                }
            }
        }
    }
}
